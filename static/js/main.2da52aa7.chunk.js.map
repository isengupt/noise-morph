{"version":3,"sources":["Scene.js","shaders/VertextParticle.js","shaders/FragmentParticles.js","shaders/Vertex.js","shaders/Fragment.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","props","setupResize","window","addEventListener","resize","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","antialias","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","mount","clientWidth","clientHeight","appendChild","domElement","position","set","controls","OrbitControls","time","addObjects","addParticles","particleMaterial","extensions","derivatives","side","uniforms","type","value","resolution","uvRate1","wireframe","vertexShader","fragmentShader","N","positions","Float32Array","particleGeometry","inc","Math","PI","sqrt","off","i","y","r","phi","cos","sin","setAttribute","points","add","material","geometry","plane","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","rotation","renderScene","render","id","ref","Component","App","className","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.2da52aa7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { vertex } from \"./shaders/Vertex\";\nimport { fragment } from \"./shaders/Fragment\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertexparticle } from \"./shaders/VertextParticle\";\nimport { fragmentparticle } from \"./shaders/FragmentParticles\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.1,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 3);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.addParticles();\n    this.animate();\n    this.resize();\n  }\n\n  addParticles() {\n    let that = this;\n    this.particleMaterial = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      wireframe: true,\n      vertexShader: vertexparticle,\n      fragmentShader: fragmentparticle,\n    });\n\n    let N = 40000;\n\n    var positions = new Float32Array(N * 3);\n\n    this.particleGeometry = new THREE.BufferGeometry();\n\n    let inc = Math.PI * (3 - Math.sqrt(5));\n\n    let off = 2 / N;\n    let rad = 1.7;\n\n    for (let i = 0; i < N; i++) {\n      let y = i * off - 1 + off / 2;\n      let r = Math.sqrt(1 - y * y);\n      let phi = i * inc;\n\n      positions[3 * i] = rad * Math.cos(phi) * r;\n      positions[3 * i + 1] = rad * y;\n      positions[3 * i + 2] = rad * Math.sin(phi) * r;\n    }\n\n    this.particleGeometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n\n    this.points = new THREE.Points(\n      this.particleGeometry,\n      this.particleMaterial\n    );\n    this.scene.add(this.points);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      //wireframe: true,\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.geometry = new THREE.SphereBufferGeometry(1, 362, 362);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n\n    /*   let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    } */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    //this.cube.rotation.x += 0.01;\n    //this.cube.rotation.y += 0.01;\n\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n    this.particleMaterial.uniforms.time.value = this.time;\nthis.points.rotation.y = this.time / 10;\n    this.renderScene();\n    this.frameId = requestAnimationFrame(this.animate);\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","\nexport var vertexparticle = `\n\nuniform float time;\n\n\nvarying vec2 vUv;\nvarying vec2 vUv1;\nvarying vec4 vPosition;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec2 pixels;\nuniform vec2 uvRate1;\n\n\nvoid main()\t{\n  \n    vUv = uv;\n\n    vec3 p = position;\n\n    p.y += 0.1 * (sin(p.y*5. + time) * 0.5 + 0.5);\n    p.z += 0.05 * (sin(p.y*10. + time) * 0.5 + 0.5);\n\n    vec4 mvPosition = modelViewMatrix * vec4(p, 1.);\n    gl_PointSize = 1. * (1. / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n`;","\nexport var fragmentparticle = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\n\n\n\nvoid main()\t{\n   \n    gl_FragColor = vec4(0.826,0.999,0.999,0.4);\n\n}\n`;","export var vertex = `\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec2 vUv1;\nvarying vec4 vPosition;\n\nvarying vec3 vColor;\nvarying vec3 vNormal;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec2 pixels;\nuniform vec2 uvRate1;\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0,2.0/3.0,1.0/3.0,3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\n    return c.z * mix(K.xxx, clamp(p-K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid main()\t{\n\n    float noise = snoise(position*10. + time/20.);\n\n    vec3 newposition = position*(noise + 0.5);\n\n\n    vColor  = hsv2rgb(vec3( noise * 0.1 + 0.03,0.8,0.8));\n    vNormal = normal;\n\n\n  \n    //vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newposition, 1.0);\n\n}\n`;\n","\nexport var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec4 vPosition;\n\nvarying vec3 vColor;\nvarying vec3 vNormal;\n\n\nvoid main()\t{\n  \n    vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n    vec3 light = vec3(0.);\nvec3 skyColor = vec3(1.000,1.000, 0.547);\nvec3 groundColor = vec3(0.562,0.275, 0.111);\n    vec3 lightDirection = normalize(vec3(0.,-1.,-1.));\n\n    light += dot(lightDirection, vNormal );\n\n    light = mix(skyColor, groundColor, dot(lightDirection,vNormal));\n\n\n    gl_FragColor = vec4(vColor,1.);\n    gl_FragColor = vec4(light * vColor,1.);\n\n}\n`;","import \"./App.css\";\nimport Scene from \"./Scene\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">Front-End Experimentaion</h1>\n        <div className=\"frame__links\"></div>\n        <div className=\"frame__nav\">\n          <a\n            className=\"frame__link\"\n            href=\"https://isengupt.github.io/fiber-website/\"\n          >\n            Previous\n          </a>\n          <a className=\"frame__link\" href=\"#\">\n            Resume\n          </a>\n          <a\n            className=\"frame__link\"\n            href=\"https://github.com/isengupt/noise-morph/\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n      <Scene />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}